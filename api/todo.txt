DONE proper destructuring done
DONE import in queries done
DONE const response => let response DONE
DONE change names of validators done
DONE move 1 middleware to validator done
DONE use utils/responseObject done
DONE prevent from adding duplicate allowed users done
DONE fix passkey check done
DONE password valid and encryption different functions done



DONE validator array[v1,v2,v3,v4,v5,v6,v7]
DONE fields validation baaki
DONE lowercase Student
DONE remove snake_case
DONE proper destructuring 
DONE _id:uuid
DONE remove unnecessary error checking
DONE Student = student
DONE getUsers => getAllUsers
DONE hide password from students (findOne field)
DONE password verification should be done inside validators
DONE prevent results to get duplicated
DONE ID => Id
DONE "encryptedPassword" into  "ctx.state"  to pass the "password"



DONE fields validation
DONE import sequence

third party
utils
queries
middleware
validators
helpers
controller



DONE try catch in validator functions
DONE var name resultDoc-> resultData
DONE add try catch only when requires
DONE api names
DONE . dot at messages
DONE import sequence changed
DONE for loop elimination



DONE route name more enhancement done
DONE logical error msg done
DONE use put req done
DONE ctx.params ma je id joiae direct ae j name rakhido done
DONE add auth as middleware before valitator



DONE entered marks must be less than maximum marks
DONE marks must be greater than 0
DONE subCode => subjectCode
DONE exact message that which field is invalid
DONE result should contain unique subjects



final code optimize 




=======
add student
email nu validation je chhe aema condition alag alag lailo
password
fn, ln
encryptedPassword ne cont ma lailo

student jyare create thai jai tyare aeni uuid joiae chhe resp ma

ek object banao and aema badhi fields add karo and ae j object db ma update thavo joiae

===

result
isMarksArrayValid: aa validator ma flag lo and a flag ni andar condition nakho
areSubjectCodesValid  aa validator ma ek single query maro